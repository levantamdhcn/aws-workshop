[
{
	"uri": "//localhost:1313/vi/",
	"title": "Build an CI/CD Pipeline for MERN App with Github Actions",
	"tags": [],
	"description": "",
	"content": "Xây dựng CI/CD Pipeline cho trang web sử dụng MERN Stacks với Github Actions Tổng quan Workshop này sẽ mô tả chi tiết các bước xây dụng một CI/CD Pipeline sử dụng Github Actions và một số công cụ được cung cấp bởi AWS như AWS CodeDeploy, AWS CodePipeline và AWS CodeBuild.\nNội dung Giới thiệu Các bước chuẩn bị Tạo kết nối đến máy chủ EC2 Quản lý session logs Port Forwarding Dọn dẹp tài nguyên "
},
{
	"uri": "//localhost:1313/vi/4-createpipelinecomponents/4.1-createscriptfiles/",
	"title": "Cập nhật IAM Role",
	"tags": [],
	"description": "",
	"content": "Để các EC2 instance của chúng ta có thể gửi session log tới S3 bucket , chúng ta sẽ cần cập nhật IAM Role đã gán vào EC2 instance bằng cách thêm vào policy cho phép quyền truy cập vào S3.\nCập nhật IAM Role Truy cập vào giao diện quản trị dịch vụ IAM Click Roles. Tại ô tìm kiếm , điền SSM. Click vào role SSM-Role. Click Attach policies. Tại ô Search điền S3. Click chọn policy AmazonS3FullAccess. Click Attach policy. Trong thực tế chúng ta sẽ cấp quyền chặt chẽ hơn tới S3 bucket chỉ định. Trong khuôn khổ bài lab này chúng ta sử dụng policy AmazonS3FullAccess cho tiện dụng.\nTiếp theo chúng ta sẽ tiến hành tạo S3 bucket để lưu trữ session logs.\n"
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.2-createdockerresource/",
	"title": "Chuẩn bị VPC và EC2",
	"tags": [],
	"description": "",
	"content": "Trong bước này, chúng ta sẽ cần tạo một VPC có 2 subnet public / private. Sau đó tạo 1 EC2 Instance Linux nằm trong public subnet, 1 EC2 Instance Windows nằm trong private subnet.\nTổng quan kiến trúc sau khi các bạn hoàn tất bước này sẽ như sau:\nĐể tìm hiểu cách tạo các EC2 instance và VPC với public/private subnet các bạn có thể tham khảo bài lab :\nGiới thiệu về Amazon EC2 Làm việc với Amazon VPC Nội dung Tạo VPC Tạo Public subnet Tạo Private subnet Tạo security group Tạo máy chủ Linux public Tạo máy chủ Windows private "
},
{
	"uri": "//localhost:1313/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "CI (Continuous Integration): CI là phương thức được sử dụng để tự động quá quy trình build và test của ứng dụng. CD kiểm tra liên tục các thay đổi trong repository và khởi động quá trình build, test. Điều này có nghĩa là mã nguồn của chúng ta liên tục được tích hợp. Quy trình CI đảm bảo rằng mã nguồn mới được liên tục build và test mà không cần thêm các bước sau khi commit. Với việc thường xuyên cập nhật và tích hợp mã nguồn mới, chúng ta giảm thiểu tối đa rủi ro về xung đột mã nguồn giữa các thành viên trong cùng một dự án.\nCD (Continuous Delivery): CD là một hoạt động kết hợp cùng với CD tạo thành 1 quy trình tự động triển khai mã nguồn tới môi trường staging hoặc testing mà không cần sự can thiệp của con người.\nCI/CD kết hợp các bước của CI \u0026amp; CD để tạo nên một quy trình triển khai phần mềm được tối ưu hóa. Với việc cài đặt CI/CD, ứng dụng sẽ có được những ưu điểm sau:\nCho phép lập trình viên commit các thay đổi nhỏ thường xuyên hơn thay vì phải gom thành 1 đợt release đủ lớn. Việc tự động, liên tục build mã nguồn đảm bảo rằng codebase luôn ổn định và xác định sớm mọi vấn đề tiềm ẩn. Khi có một vấn đề nào đó được phát hiện trong quá trình CI/CD, logs và build flow được cung cấp một cách chi tiết, đẩy đủ, trực quan để giúp việc sửa lỗi dễ dàng và nhanh gọn hơn. Với những ưu điểm trên, chúng ta hoàn toàn nên cân nhắc về việc triển khai CI/CD cho ứng dụng để tiết kiệm thời gian và công sức phát triển.\n"
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.4-createec2/2.4.1-createvpc/",
	"title": "Tạo VPC ",
	"tags": [],
	"description": "",
	"content": "Tạo VPC Lab VPC Truy cập giao diện quản trị dịch vụ VPC Click Your VPC. Click Create VPC. Tại trang Create VPC. Tại mục Name tag điền Lab VPC. Tại mục IPv4 CIDR điền : 10.10.0.0/16. Click Create VPC. "
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.2-createdockerresource/2.2.2-createserverimage/",
	"title": "Viết Dockerfile cho Server",
	"tags": [],
	"description": "",
	"content": "Tạo Dockerfile Trong thư mục server, tạo 1 file mới và đặt tên là Dockerfile với nội dung sau:\n# Build node server FROM node:18.17.0-alpine3.18 # Working directory WORKDIR /src COPY package*.json ./ ### Installing dependencies RUN npm ci # copy local files to app folder COPY . . EXPOSE 4000 CMD [\u0026#34;npm\u0026#34;, \u0026#34;run dev\u0026#34;] Cùng đi sâu và tìm hiểu ý nghĩa của từng dòng lệnh:\nChọn base image cho container. Ở dòng này, ta sẽ sử dụng Node.js runtime phiên bản 18.17.0 trên hệ điều hành Alpine Linux 3.18. Alpine là một một bản phân phối Linux nhẹ, giữ cho kích thước của image được tối ưu. FROM node:18.17.0-alpine3.18 Cài đặt working directory trong container là /src. Mọi commands sau này sẽ được thực thi tại thư mục này. Nếu thư mục này chưa tồn tại, Docker sẽ tự động tạo mới. WORKDIR /src Chép 2 files package.json và package-lock.json (nếu tồn tại) từ thư mục server vào trong đường dẫn /src bên trong container COPY package*.json ./ Thực thi lệnh npm ci bên trong container để cài đặt các gói, thư viện được liệt kê trong file package.json. Với lệnh npm ci, ta đảm bảo rằng sẽ cài đặt chính xác phiên bản của các gói, thư viện đã được cài lần trước đó trong package-lock.json. RUN npm ci Copy tất cả các files còn lại trong thư mục server vào trong đường dẫn /src trong container. COPY . . Lệnh này dùng để cài đặt cho container sẽ lắng nghe trên cổng 4000. Cho pháp các container khác trong cùng mạng có thể liên lạc qua với container này qua cổng 4000. EXPOSE 4000 Chỉ định lệnh mặc định được chạy khi container được khởi tạo. CMD [\u0026#34;npm\u0026#34;, \u0026#34;run dev\u0026#34;] Bước cuối cùng, ta tạo thêm 1 file đặt tên .dockerignore trong thư mục server với nội dung sau:\n/node_modules Khi build image, lệnh COPY . . sẽ bỏ qua thư mục này (do rất nặng, ta sẽ tạo ra thư mục này bên trong container với lệnh npm ci)\nKết thúc.\n"
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "\rBạn cần tạo sẵn 1 Linux instance thuộc public subnet và 1 Window instance thuộc private subnet để thực hiện bài thực hành này.\nĐể tìm hiểu cách tạo các EC2 instance và VPC với public/private subnet các bạn có thể tham khảo bài lab :\nGiới thiệu về Amazon EC2 Làm việc với Amazon VPC Để sử dụng System Manager để quản lý window instance nói riêng và các instance nói chung của chúng ta trên AWS, ta cần phải cung cấp quyền cho các instance của chúng ta có thể làm việc với System Manager.Trong phần chuẩn bị này, chúng ta cũng sẽ tiến hành tạo IAM Role để cấp quyền cho các instance có thể làm việc với System Manager.\nNội dung Chuẩn bị VPC và EC2 Instance Tạo IAM Role "
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.3-createiamrole/",
	"title": "Tạo IAM Role",
	"tags": [],
	"description": "",
	"content": "Tạo IAM Role cho EC2 Ở bước này, chúng ta sẽ tiến hành tạo IAM Role cho EC2. Trong IAM Role, chúng ta sẽ tiến hành gán policy AmazonS3ReadOnlyAccess, policy này cho phép EC2 server lấy artifact từ S3 Bucket và tiến hành triển khai.\nĐi tới IAM service administration interface Ở thanh điều hướng phía bên trái, chọn vào Roles. Chọn Create role. Chọn AWS service, tiếp theo chọn EC2. Chọn vào Next: Permissions. Tại ô tìm kiếm, nhập S3 và bấm Enter để tìm policy. Chọn vào policy có tên AmazonS3ReadOnlyAccess. Chọn vào Next: Tags. Chọn Next: Review. Đặt tên Role EC2S3ReadPermission tại trường Role Name Click vào Create Role . Create IAM Role For AWS CodeDeploy Quay lại màn hình Roles. Click vào Create role. Click vào AWS service và chọn vào CodeDeploy. Click vào Next: Permissions. Đặt tên Role ChatAppCodeDeploy tại trường Role Name Click vào Create Role . Tiếp theo, chúng ta sẽ tiếp tục tạo VPC và EC2 để triển khai ứng dụng.\n"
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.2-createdockerresource/2.2.1-createnginximage/",
	"title": "Tạo Nginx Image",
	"tags": [],
	"description": "",
	"content": "Tạo Nginx Image Trong thư mục gốc, ta tạo 1 file mới và đặt tên là Dockerfile với nội dung sau:\n#vi Dockerfile FROM nginx:latest WORKDIR /usr/share/nginx/html COPY . . RUN rm /etc/nginx/conf.d/default.conf COPY ./nginx.conf /etc/nginx/conf.d ENTRYPOINT [ \u0026#34;nginx\u0026#34; , \u0026#34;-g\u0026#34; , \u0026#34;daemon off;\u0026#34; ] Cùng tìm hiểu ý nghĩa từng dòng lệnh:\nChọn base image cho container. Ở dòng này chúng ta sử dụng phiên bản chính thức mới mất của Nginx image từ Docker Hub. FROM nginx:latest Sets the working directory inside the container to /usr/share/nginx/html. Which is the default location where Nginx serves static files, any subsequent commands will be executed in this directory. If it doesn\u0026rsquo;t exist, Docker will create it. WORKDIR /usr/share/nginx/html Copies all the remaining files from server\u0026rsquo;s directory into the working directory (/usr/share/nginx/html) of the container COPY . . This command removes the default Nginx configuration file. RUN rm /etc/nginx/conf.d/default.conf Copy our customized configuration file into container. Which we have created from Preparing Nginx Config COPY ./nginx.conf /etc/nginx/conf.d Runs Nginx in the foreground (daemon off;), which is necessary for containers since they terminate when their main process exits. This keeps the Nginx server running. ENTRYPOINT [ \u0026#34;nginx\u0026#34;, \u0026#34;-g\u0026#34;, \u0026#34;daemon off;\u0026#34; ]: End.\n"
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.4-createec2/2.4.2-createpublicsubnet/",
	"title": "Tạo Public subnet",
	"tags": [],
	"description": "",
	"content": "Tạo Public subnet Click Subnets. Click Create subnet. Tại trang Create subnet. Tại mục VPC ID click chọn Lab VPC. Tại mục Subnet name điền Lab Public Subnet. Tại mục Availability Zone chọn Availability zone đầu tiên. Tại mục IPv4 CIRD block điền 10.10.1.0/24. Kéo xuống cuối trang , click Create subnet.\nClick chọn Lab Public Subnet.\nClick Actions. Click Edit subnet settings. Click chọn Enable auto-assign public IPv4 address. Click Save. Click Internet Gateways. Click Create internet gateway. Tại trang Create internet gateway. Tại mục Name tag điền Lab IGW. Click Create internet gateway. Sau khi tạo thành công, click Actions. Click Attach to VPC. Tại trang Attach to VPC. Tại mục Available VPCs chọn Lab VPC. Click Attach internet gateway. Kiểm tra quá trình attach thành công như hình dưới. Tiếp theo chúng ta sẽ tạo một custom route table để gán vào Lab Public Subnet. Click Route Tables. Click Create route table. Tại trang Create route table. Tại mục Name, điền Lab Publicrtb. Tại mục VPC, chọn Lab VPC. Click Create route table. Sau khi tạo route table thành công. Click Edit routes. Tại trang Edit routes. Click Add route. Tại mục Destination điền 0.0.0.0/0 Tại mục Target chọn Internet Gateway sau đó chọn Lab IGW. Click Save changes. Click tab Subnet associations. Click Edit subnet associations để tiến hành associate custom routable chúng ta vừa tạo vào Lab Public Subnet. Tại trang Edit subnet associations. Click chọn Lab Public Subnet. Click Save associations. Kiểm tra thông tin route table đã được associate với Lab Public Subnet và thông tin route đi internet đã được trỏ đến Internet Gateway như hình dưới. "
},
{
	"uri": "//localhost:1313/vi/4-createpipelinecomponents/4.2-createcodedeployymlfile/",
	"title": "Tạo S3 Bucket",
	"tags": [],
	"description": "",
	"content": "Trong bước này, chúng ta sẽ tạo 1 S3 bucket để lưu trữ các session logs được gửi từ các EC2 instance.\nTạo S3 Bucket Truy cập giao diện quản trị dịch vụ S3 Click Create bucket. Tại trang Create bucket. Tại mục Bucket name điền tên bucket lab-yourname-bucket-0001 Tại mục Region chọn Region bạn đang làm lab hiện tại. Tên S3 bucket phải đảm bảo không trùng với toàn bộ S3 bucket khác trong hệ thống. Bạn có thể thay thế tên mình và điền số ngẫu nhiên khi tạo tên S3 bucket.\nKéo chuột xuống phía dưới và click Create bucket. Khi tạo S3 bucket chúng ta đã thực hiện Block all public access nên các EC2 instance của chúng ta sẽ không thể kết nối tới S3 thông qua mạng internet. Trong bước tiếp theo chúng ta sẽ cấu hình tính năng S3 Gateway Endpoint để cho phép các EC2 instance có thể kết nối tới S3 bucket thông qua mạng nội bộ của VPC.\n"
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.1-createnginx/",
	"title": "Thiết lập cài đặt nginx",
	"tags": [],
	"description": "",
	"content": "Cấu trúc thư mục của dự án: Tạo 1 file mới đặt tên là nginx.conf năm trong thư mục nginx ở cấp ngoài cùng với nội dung sau:\nserver { listen 80; root /usr/share/nginx/html; index index.html; location / { try_files $uri /index.html =404; } location /api { proxy_pass http://localhost:4000; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $host; proxy_redirect off; } } Chi tiết các cài đặt:\nTạo 1 server ảo, mỗi server có thể lắng nghe request từ cổng hoặc máy chủ khác nhau. server {} Chỉ định block server này sẽ lắng nghe các request từ cổng 80, cổng mặc định của HTTP traffic. listen 80; Chỉ định thư mục chứa các files mà nginx sẽ trả về cho các connection hợp lệ. root /usr/share/nginx/html; Chỉ định file mặc định được trả về khi có request từ client. index index.html; Định nghĩa một block địa chỉ bao gồm các cài đặt để xử lý các request có dạng (/). location / {} Nếu request có địa chỉ $uri không tồn tại, trả về file mặc định (/index.html) trong root folder đã cài đặt ở block server. Nếu cả $uri và file index.html đều không tồn tại thì trả về trang 404. try_files $uri /index.html =404; Định nghĩa một block địa chỉ bao gồm các cài đặt để xử lý các request có dạng (/api). Trong dự án này, chúng ta sử dụng tiền tố /api để phân loại các request đến Backend. Bằng cách này ta có thể chạy cả Backend và Frontend trên cùng 1 ec2 instance. location /api proxy_pass directive điều hướng các requests phù hợp với dạng địa chỉ (/api) to đến một server khác (cụ thể ở đây là cùng server đó nhưng ở 1 cổng cụ thể - 4000). proxy_pass http://localhost:4000; Chỉ định các thuộc tính của HTTP headers proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\rproxy_set_header Host $host;\rproxy_redirect off; Kết thúc. Phần chuẩn bị cài đặt cho Nginx đến đây là hoàn thành.\n"
},
{
	"uri": "//localhost:1313/vi/3-buildandtestimage/",
	"title": "Tạo kết nối đến máy chủ EC2",
	"tags": [],
	"description": "",
	"content": "Trong bước này, chúng ta sẽ thực hiện tạo kết nối đến các máy chủ EC2 của chúng ta, nằm trong cả public và private subnet.\nNội dung 3.1. Tạo Kết nối đến máy chủ EC2 Public 3.2. Tạo Kết nối đến máy chủ EC2 Private\n"
},
{
	"uri": "//localhost:1313/vi/4-createpipelinecomponents/4.3-createbuildspecfile/",
	"title": "Tạo S3 Gateway endpoint",
	"tags": [],
	"description": "",
	"content": " Truy cập vào giao diện quản trị dịch vụ VPC Click Endpoints. Click Create endpoint. Tại trang Create endpoint. Tại mục Name tag điền S3GW. Tại mục Service Category click chọn AWS services. Tại ô tìm kiếm điền S3, sau đó chọn com.amazonaws.[region].s3 Tại mục Services chọn com.amazonaws.[region].s3 có Type là Gateway. Tại mục VPC , chọn Lab VPC. Tại mục Route tables, chọn cả 2 route table. Kéo chuột xuống dưới cùng, click Create endpoint. Bước tiếp theo chúng ta sẽ tiến hành cấu hình Session Manager để có thể lưu trữ các session logs tới S3 bucket chúng ta đã tạo.\n"
},
{
	"uri": "//localhost:1313/vi/4-createpipelinecomponents/",
	"title": "Quản lý session logs",
	"tags": [],
	"description": "",
	"content": "Với Session Manager chúng ta có thể xem được lịch sử các kết nối tới các instance thông qua Session history. Tuy nhiên chúng ta chưa xem được chi tiết các câu lệnh được sử dụng.\nTrong phần này chúng ta sẽ tiến hành tạo S3 bucket và thực hiện cấu hình lưu trữ các session logs để xem được chi tiết các câu lệnh được sử dụng trong session.\nNội dung: Cập nhật IAM Role Tạo S3 Bucket Tạo S3 Gateway endpoint Cấu hình Session logs "
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.4-createec2/2.4.3-createsecgroup/",
	"title": "Tạo các security group",
	"tags": [],
	"description": "",
	"content": "Tạo các security group Trong bước này chúng ta sẽ tiến hành tạo các security group được sử dụng cho các instance của chúng ta. Các bạn có thể thấy, các securiy group này sẽ không cần phải mở các port truyền thống để ssh như port 22 hoặc remote desktop thông qua port 3389.\nTạo security group cho Linux instance nằm trong public subnet Truy cập giao diện quản trị dịch vụ VPC Click Security Group. Click Create security group. Tại mục Security group name, điền SG Public Linux Instance. Tại mục Description, điền SG Public Linux Instance. Tại mục VPC, click dấu X để chọn lại Lab VPC bạn đã tạo cho bài lab này. Giữ nguyên Outbound rule, kéo chuột xuống phía dưới. Click Create security group. Các bạn có thể thấy, security group chúng ta tạo sử dụng cho Linux public instance sẽ không cần phải mở các port truyền thống để ssh như port 22.\nTạo security group cho Windows instance nằm trong private subnet Sau khi tạo thành công security group cho Linux instance nằm trong public subnet, click vào link Security Groups để quay trở lại danh sách Security groups. Click Create security group.\nTại mục Security group name, điền SG Private Windows Instance.\nTại mục Description, điền SG Private Windows Instance. Tại mục VPC, click dấu X để chọn lại Lab VPC bạn đã tạo cho bài lab này. Kéo chuột xuống phía dưới. Thêm Outbound rule cho phép kết nối TCP 443 tới 10.10.0.0/16 ( CIDR của Lab VPC chúng ta đã tạo) Click Create security group. Đối với Instance trong private subnet, chúng ta sẽ kết nối tới endpoint của Session Manager qua kết nối đã được mã hóa TLS. vì thế chúng ta cần cho phép kết nối chiều ra từ instance của mình tới VPC CIDR thông qua port 443.\nTạo security group cho VPC Endpoint Trong bước này, chúng ta sẽ tạo security group cho VPC Endpoint của Session Manager. Sau khi tạo thành công security group cho Windows instance trong private subnet, click vào link Security Groups để quay trở lại danh sách Security groups. Click Create security group. Tại mục Security group name, điền SG VPC Endpoint. Tại mục Description, điền SG VPC Endpoint. Tại mục VPC, click dấu X để chọn lại Lab VPC bạn đã tạo cho bài lab này. Kéo chuột xuống phía dưới. Xóa Outbound rule. Thêm Inbound rule cho phép TCP 443 đến từ 10.10.0.0/16 ( CIDR của Lab VPC chúng ta đã tạo ). Click Create security group. Như vậy chúng ta đã tiến hành xong việc tạo các security group cần thiết cho các EC2 instance và VPC Endpoint.\n"
},
{
	"uri": "//localhost:1313/vi/4-createpipelinecomponents/4.4-createcodebuild/",
	"title": "Theo dõi session logs",
	"tags": [],
	"description": "",
	"content": "Theo dõi session logs Truy cập giao diện quản trị dịch vụ System Manager - Session Manager Click tab Preferences. Click Edit. Kéo chuột xuống phía dưới, tại mục S3 logging, click chọn Enable. Bỏ chọn Allow only encrypted S3 buckets. Click chọn Choose a bucket name from the list. Chọn S3 bucket bạn đã tạo. Kéo chuột xuống phía dưới, click Save để lưu cấu hình.\nTruy cập giao diện quản trị dịch vụ System Manager - Session Manager\nClick Start session. Click chọn Private Windows Instance. Click Start session. Gõ lệnh ipconfig. Gõ lệnh hostname. Click Terminate để thoát session, click Terminate 1 lần nữa để xác nhận. Kiểm tra Session logs trong S3 Truy cập vào giao diện quản trị dịch vụ S3 Click vào tên S3 bucket chúng ta đã tạo cho bài lab. Click vào tên file sessions log Tại trang chi tiết objects , click Open. File logs sẽ được mở ở 1 tab mới trên trình duyệt.Bạn có thể xem các câu lệnh đã được lưu trữ lại trong session logs. "
},
{
	"uri": "//localhost:1313/vi/4-createpipelinecomponents/4.5-createcodedeploy/",
	"title": "Theo dõi session logs",
	"tags": [],
	"description": "",
	"content": "Theo dõi session logs Truy cập giao diện quản trị dịch vụ System Manager - Session Manager Click tab Preferences. Click Edit. Kéo chuột xuống phía dưới, tại mục S3 logging, click chọn Enable. Bỏ chọn Allow only encrypted S3 buckets. Click chọn Choose a bucket name from the list. Chọn S3 bucket bạn đã tạo. Kéo chuột xuống phía dưới, click Save để lưu cấu hình.\nTruy cập giao diện quản trị dịch vụ System Manager - Session Manager\nClick Start session. Click chọn Private Windows Instance. Click Start session. Gõ lệnh ipconfig. Gõ lệnh hostname. Click Terminate để thoát session, click Terminate 1 lần nữa để xác nhận. Kiểm tra Session logs trong S3 Truy cập vào giao diện quản trị dịch vụ S3 Click vào tên S3 bucket chúng ta đã tạo cho bài lab. Click vào tên file sessions log Tại trang chi tiết objects , click Open. File logs sẽ được mở ở 1 tab mới trên trình duyệt.Bạn có thể xem các câu lệnh đã được lưu trữ lại trong session logs. "
},
{
	"uri": "//localhost:1313/vi/4-createpipelinecomponents/4.6-createcodepipeline/",
	"title": "Theo dõi session logs",
	"tags": [],
	"description": "",
	"content": "Theo dõi session logs Truy cập giao diện quản trị dịch vụ System Manager - Session Manager Click tab Preferences. Click Edit. Kéo chuột xuống phía dưới, tại mục S3 logging, click chọn Enable. Bỏ chọn Allow only encrypted S3 buckets. Click chọn Choose a bucket name from the list. Chọn S3 bucket bạn đã tạo. Kéo chuột xuống phía dưới, click Save để lưu cấu hình.\nTruy cập giao diện quản trị dịch vụ System Manager - Session Manager\nClick Start session. Click chọn Private Windows Instance. Click Start session. Gõ lệnh ipconfig. Gõ lệnh hostname. Click Terminate để thoát session, click Terminate 1 lần nữa để xác nhận. Kiểm tra Session logs trong S3 Truy cập vào giao diện quản trị dịch vụ S3 Click vào tên S3 bucket chúng ta đã tạo cho bài lab. Click vào tên file sessions log Tại trang chi tiết objects , click Open. File logs sẽ được mở ở 1 tab mới trên trình duyệt.Bạn có thể xem các câu lệnh đã được lưu trữ lại trong session logs. "
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.4-createec2/2.4.4-createec2linux/",
	"title": "Tạo Public Linux EC2",
	"tags": [],
	"description": "",
	"content": " Truy cập giao diện quản trị dịch vụ EC2 Click Instances. Click Launch instances. Tại trang Step 1: Choose an Amazon Machine Image (AMI). Click Select để lựa chọn AMI Amazon Linux 2 AMI. Tại trang Step 2: Choose an Instance Type. Click chọn Instance type t2.micro. Click Next: Configure Instance Details. Tại trang Step 3: Configure Instance Details Tại mục Network chọn Lab VPC. Tại mục Subnet chọn Lab Public Subnet. Tại mục Auto-assign Public IP chọn Use subnet setting (Enable) Click Next: Add Storage. Click Next: Add Tags để chuyển sang bước kế tiếp. Click Next: Configure Security Group để chuyển sang bước kế tiếp. Tại trang Step 6: Configure Security Group. Chọn Select an existing security group. Chọn security group SG Public Linux Instance. Click Review and Launch. Hộp thoại cảnh báo hiện lên vì chúng ta không cấu hình tường lửa cho phép kết nối vào port 22, Click Continue để tiếp tục.\nTại trang Step 7: Review Instance Launch.\nClick Launch. Tại hộp thoại Select an existing key pair or create a new key pair. Click chọn Create a new key pair. Tại mục Key pair name điền LabKeypair. Click Download Key Pair và lưu xuống máy tính của bạn. Click Launch Instances để tạo máy chủ EC2. Click View Instances để quay lại danh mục EC2 instances.\nClick vào biểu tượng edit dưới cột Name.\nTại hộp thoại Edit Name điền Public Linux Instance. Click Save. Tiếp theo chúng ta sẽ thực hiện tương tự để tạo 1 EC2 Instance Windows chạy trong Private subnet.\n"
},
{
	"uri": "//localhost:1313/vi/5-cleanup/",
	"title": "Dọn dẹp tài nguyên  ",
	"tags": [],
	"description": "",
	"content": "Chúng ta sẽ tiến hành các bước sau để xóa các tài nguyên chúng ta đã tạo trong bài thực hành này.\nXóa EC2 instance Truy cập giao diện quản trị dịch vụ EC2 Click Instances. Click chọn cả 2 instance Public Linux Instance và Private Windows Instance. Click Instance state. Click Terminate instance, sau đó click Terminate để xác nhận. Truy cập giao diện quản trị dịch vụ IAM Click Roles. Tại ô tìm kiếm , điền SSM. Click chọn SSM-Role. Click Delete, sau đó điền tên role SSM-Role và click Delete để xóa role. Click Users. Click chọn user Portfwd. Click Delete, sau đó điền tên user Portfwd và click Delete để xóa user. Xóa S3 bucket Truy cập giao diện quản trị dịch vụ System Manager - Session Manager. Click tab Preferences. Click Edit. Kéo chuột xuống dưới. Tại mục S3 logging. Bỏ chọn Enable để tắt tính năng logging. Kéo chuột xuống dưới. Click Save. Truy cập giao diện quản trị dịch vụ S3 Click chọn S3 bucket chúng ta đã tạo cho bài thực hành. ( Ví dụ : lab-fcj-bucket-0001 ) Click Empty. Điền permanently delete, sau đó click Empty để tiến hành xóa object trong bucket. Click Exit. Sau khi xóa hết object trong bucket, click Delete Điền tên S3 bucket, sau đó click Delete bucket để tiến hành xóa S3 bucket. Xóa các VPC Endpoint Truy cập vào giao diện quản trị dịch vụ VPC Click Endpoints. Chọn 4 endpoints chúng ta đã tạo cho bài thực hành bao gồm SSM, SSMMESSAGES, EC2MESSAGES, S3GW. Click Actions. Click Delete VPC endpoints. Tại ô confirm , điền delete. Click Delete để tiến hành xóa các endpoints. Click biểu tượng refresh, kiểm tra tất cả các endpoints đã bị xóa trước khi làm bước tiếp theo. Xóa VPC Truy cập vào giao diện quản trị dịch vụ VPC Click Your VPCs. Click chọn Lab VPC. Click Actions. Click Delete VPC. Tại ô confirm, điền delete để xác nhận, click Delete để thực hiện xóa Lab VPC và các tài nguyên liên quan. "
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.2-createdockerresource/2.2.3-createdockercompose/",
	"title": "",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.4-createec2/2.4.5-testconnection/",
	"title": "",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.4-createec2/2.4.6-settingec2/",
	"title": "",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.4-createec2/",
	"title": "",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.5-creates3bucket/",
	"title": "",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]